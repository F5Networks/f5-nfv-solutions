
dsl_definitions:

  write_files: &write_files
    - path: /config/internal_ca_cert.pem
      permissions: 0755
      owner: root:root
      content: { get_secret: internal_ca_cert }
    - path: /config/createLog.sh
      permissions: 0755
      owner: root:root
      content: |
        #!/bin/bash
        mkdir -p /var/log/cloud/f5-vnf
        touch /var/log/cloud/f5-vnf/cloud_config.log
    - path: /config/postCloudInit.sh
      permissions: 0755
      owner: root:root
      content: |
        #!/bin/bash
        echo 1 > /proc/sys/dev/cdrom/autoeject
        umount /mnt/config
    - path: /config/executeWhenExists.sh
      permissions: 0755
      owner: root:root
      content: |
        #!/bin/bash

        file_name="${1}"
        command="${@:2}"
        retries=60
        interval=15

        . /config/utils.sh

        retry_run "test -f ${file_name} && nohup sh -c \"${command}\" >> /var/log/cloud/f5-vnf/cloud_config.log 2>&1" ${retries} ${interval}

    - path: /config/downloadScript.sh
      permissions: 0755
      owner: root:root
      content: |
        #!/bin/bash

        manager_mgmt_host=${1}
        manager_rest_username="${2}"
        manager_rest_password="${3}"
        tenant_name="${4}"
        bp_name="${5}"
        scripts_path="${6}"
        script_name="${7}"
        retries=${8:-60}
        interval=${9:-15}

        function log() {
          source=${1}
          message=${2}

          printf "${source}: %s %s\n" "$(date --utc '+%FT%T.%3NZ')" "${message}" >> /var/log/cloud/f5-vnf/cloud_config.log
        }

        for i in  $(seq 1 ${retries});
        do
          curl -u "${manager_rest_username}":"${manager_rest_password}" -k https://"{$manager_mgmt_host}":53333/resources/blueprints/"${tenant_name}"/"${bp_name}"/"${scripts_path}"/"${script_name}" -o /config/"${script_name}" >> /var/log/cloud/f5-vnf/cloud_config.log 2>&1
          download_status=$?
          if [ ${download_status} -eq 0 ]
          then
            break
          fi
          echo "a: ${download_status}"
          log scriptDownload.sh "Downloading script ${script_name} failed with status ${download_status}"  >> /var/log/cloud/f5-vnf/cloud_config.log 2>&1
          sleep ${interval}
        done


        chmod 0755 "/config/${script_name}"
        chown root:root "/config/${script_name}"
    - path: /config/utils.sh
      permissions: 0755
      owner: root:root
      content: |
        function log() {
          message=${1}
          source=${2}

          printf "%s %s %s\n" "$(date --utc '+%FT%T.%3NZ')" "${source}" "${message}" >> /var/log/cloud/f5-vnf/${source}_$$.log
        }

        function retry_run() {
          cmd="${1}"
          retries="${2}"
          interval="${3}"

          retries_str=${retries}
          if test "${retries}" -lt 0; then
            retries_str=inf
          fi

          for (( i=1; ${retries}<0 || i<=${retries}; i++ ))
          do
            log "Try ${i} of ${retries_str}, executing: ${cmd}" "retry_run"
            cmd_out=$(eval ${cmd})
            cmd_status=$?
            if [ $cmd_status -eq 0 ]; then
              log "Comamnd succeeded. Command output: \"${cmd_out}\"" "retry_run"
              return 0
            fi
            log "Comamnd failed with status $cmd_status. Command output: \"${cmd_out}\"" "retry_run"
            sleep ${interval}
          done
          return 1
        }

        function mcpd_running() {
          tmsh show sys mcp-state field-fmt | grep -q running
          return $?
        }

        function ntp_syncing_to_server() {
          remote=$(ntpq -np | tail -n +3 | awk '{print $2}')

          if  test ! -z "${remote}" && test "${remote}" != ".LOCL."; then
            log "NTP syncing to remote server ${remote}" "ntp_sync_to_server"
            return 0
          fi
          log "NTP is not syncing to remote server ${remote}" "ntp_sync_to_server"
          return 1
        }
    - path: /config/ntpConfig.sh
      permissions: 0755
      owner: root:root
      content: |
        #!/bin/bash

        ntp="${1}"
        tz="${2}"
        retries="${3:-60}"
        interval="${4:-15}"
        timeout=60

        . /config/utils.sh

        log '*****NTP_CONFIG STARTING******' 'ntpConfig.sh'

        retry_run mcpd_running 60 15

        retry_run "tmsh modify /sys ntp servers add { ${ntp} }" ${retries} ${interval}
        retry_run "tmsh modify /sys ntp timezone ${tz}" ${retries} ${interval}
        retry_run "tmsh save /sys config" ${retries} ${interval}

        bigstart stop ntpd
        for i in $(seq 1 ${retries}); do timeout ${timeout} ntpd -gq  && s=0 && break || s=$? && sleep 5; echo "Try ${i} of ${retries}, executing: ntp sync ${ntp} retry_run"; done; (exit $s)
        bigstart start ntpd

        log '*****NTP_CONFIG FINISHED******' 'ntpConfig.sh'
    - path: /config/awaitNtpSync.sh
      permissions: 0755
      owner: root:root
      content: |
        #!/bin/bash

        ntp_sync_retries=${1:-60}
        ntp_sync_interval=${2:-15}

        . /config/utils.sh

        function main() {
          log "******Starting NTP sync script******" "awaitNtpSync.sh"

          if retry_run "ntp_syncing_to_server && ntpstat" ${ntp_sync_retries} ${ntp_sync_interval}
          then
            log "NTP sync successful" "awaitNtpSync.sh"
            return 0
          else
            log "NTP sync failed" "awaitNtpSync.sh"
            return 1
          fi

          log "******Finished NTP sync script******" "awaitNtpSync.sh"
        }

        main


node_types:

  f5.gilan.nodes.onboard.NetworkNNic:
    derived_from: cloudify.nodes.Root
    properties:
      vlan_creates:
        type: string
      vlan_names:
        type: string
      vlan_tags:
        type: string
      vlan_mtus:
        type: string
      port_macs:
        type: string
      vlan_nic_count:
        type: integer
      self_port_lockdowns:
        type: string
      self_ips:
        type: string
      self_ip_cidrs:
        type: string
      default_gateway:
        type: string
      cmp_src_vlans:
        type: string
      cmp_dst_vlans:
        type: string
      tier:
        type: string
      user:
        type: string
      pwd:
        type: string
      bgp_pgw_peer_ip:
        type: string
      bgp_pgw_peer_as:
        type: string
      bgp_egw_peer_ip:
        type: string
      bgp_egw_peer_as:
        type: string

  f5.gilan.nodes.onboard.CloudConfigRuncmd:
    derived_from: cloudify.nodes.Root
    properties:
      createLog:
        type: string
        default: "/config/createLog.sh"
      configureMgmt:
        type: string
        default: "echo 'Using default management configuration' >> /var/log/cloud/f5-vnf/cloud_config.log"
      overrideConfig:
        type: string
        default: { concat: ["/config/executeWhenExists.sh ", "/config/override_config.sh ", "/config/override_config.sh ", "True", " ", { get_secret: bigip_admin_password }, " ", { get_secret: bigip_root_password }, " &" ]}
      preOnboard:
        type: string
        default: { concat: ["/config/executeWhenExists.sh ", "/config/preOnboard.sh ", "/config/preOnboard.sh ",{ get_input: key_name }," ","False",
            " ", { get_input: manager_mgmt_host }, " ", {get_attribute: [id, blueprint_id]}, " ", { get_secret: cm_tenant}, # $ 3,4,5
            " ", "/build/f5-cloud-libs/v4.3.0/", " ","f5-cloud-libs.tar.gz", " ", "/build/f5-telemetry-streaming/", " ", "f5-telemetry-1.11.0-1.noarch.rpm", " ", "/build/f5-appsvcs/v3.19.1/", " ", "f5-appsvcs-3.19.1-1.noarch.rpm", # $ 6,7,8,9
            " ", { get_secret: manager_rest_username }, " ", { get_secret: manager_rest_password}, # $ 10,11
            " ", { get_input: use_config_drive }, # $ 12
            ">> /var/log/cloud/f5-vnf/cloud_config.log", " &" ]}
      encrypt:
        type: string
        default: { concat: ["/config/executeWhenExists.sh ", "/config/wait-cloudlibsInstall.sh ",  "/config/wait-cloudlibsInstall.sh && f5-rest-node /config/cloud/f5-vnf/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js --file /config/encrypt.sh --signal ENCR_DONE -o /var/log/cloud/f5-vnf/cloud_config.log", " &" ]}
      ntpConfig:
        type: string
        default: { concat: ["/config/ntpConfig.sh ", {get_input: ntp_server}," ",{get_input: timezone}, " >> /var/log/cloud/f5-vnf/cloud_config.log", " &"]}
      onboard:
        type: string
        default: { concat: ["/config/executeWhenExists.sh ", "/config/wait-cloudlibsInstall.sh ", "/config/wait-cloudlibsInstall.sh && f5-rest-node /config/cloud/f5-vnf/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js --file /config/onboard.sh --wait-for ENCR_DONE --signal ONBOARD_CONF_DONE --cl-args ",'"',{get_attribute: [mgmt_net, external_resource, mtu]}," ", { get_input: big_iq_host }, " ", { get_secret: bigiq_username }, " ", {get_input: big_iq_lic_pool}, " ", { get_secret: bigiq_password }, " ", {get_attribute: [SELF, mgmt_port, id]}, " ", "dag", " ", "None", " ", "dag", "\"", " -o /var/log/cloud/f5-vnf/cloud_config.log", " &" ]}
      installAs3:
        type: string
        default: { concat: ["/config/executeWhenExists.sh ", "/config/wait-cloudlibsInstall.sh ", "/config/wait-cloudlibsInstall.sh && f5-rest-node /config/cloud/f5-vnf/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js --file /config/installAS3.sh --wait-for ONBOARD_CONF_DONE --signal INSTALL_AS3_DONE --cl-args ",'"',{ get_secret: bigip_admin_password }," ", "f5-appsvcs-3.19.1-1.noarch.rpm","\"", " -o /var/log/cloud/f5-vnf/cloud_config.log", " &" ]}
      installTS:
        type: string
        default: { concat: ["/config/executeWhenExists.sh ", "/config/wait-cloudlibsInstall.sh ", "/config/wait-cloudlibsInstall.sh && f5-rest-node /config/cloud/f5-vnf/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js --file /config/installTS.sh --wait-for INSTALL_AS3_DONE --signal INSTALL_TELEMETRY_DONE --cl-args ",'"',{ get_secret: bigip_admin_password }," ", "f5-telemetry-1.11.0-1.noarch.rpm","\"", " -o /var/log/cloud/f5-vnf/cloud_config.log", " &" ]}
      onboardNetworkNNic:
        type: string
        default: { concat: ["/config/executeWhenExists.sh ", "/config/wait-cloudlibsInstall.sh ", "/config/wait-cloudlibsInstall.sh && f5-rest-node /config/cloud/f5-vnf/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js --file /config/onboard-network-nnic.sh --wait-for INSTALL_TELEMETRY_DONE --signal ONBOARD_NNIC_DONE --cl-args ",
            '"', {get_attribute: [mgmt_net, external_resource, mtu]},  " ",  #${1}
            {get_property: [onboard_network_nnic, vlan_creates]},  " ",  #${2}
            {get_property: [onboard_network_nnic, vlan_names]}, " ",  #${3}
            {get_property: [onboard_network_nnic, vlan_tags]},  " ",  #${4}
            {get_property: [onboard_network_nnic, vlan_mtus]},  " ",  #${5}
            {get_property: [onboard_network_nnic, port_macs]},  " ",  #${6}
            {get_property: [onboard_network_nnic, vlan_nic_count]}, " ",  #${7}
            {get_property: [onboard_network_nnic, self_port_lockdowns]}, " ",  #${8}
            {get_property: [onboard_network_nnic, self_ips]},   " ",  #${9}
            {get_property: [onboard_network_nnic, self_ip_cidrs]},  " ",  #${10}
            {get_property: [onboard_network_nnic, default_gateway]},    " ",  #${11}
            {get_property: [onboard_network_nnic, cmp_src_vlans]},  " ",  #${12}
            {get_property: [onboard_network_nnic, cmp_dst_vlans]},  " ",  #${13}
            {get_property: [onboard_network_nnic, tier]},   " ",  #${14}
            {get_property: [onboard_network_nnic, user]},   " ",  #${15}
            {get_property: [onboard_network_nnic, pwd]},    " ",  #${16}
            {get_property: [onboard_network_nnic, bgp_pgw_peer_ip]},    " ",  #${17}
            {get_property: [onboard_network_nnic, bgp_pgw_peer_as]},    " ",  #${18}
            {get_property: [onboard_network_nnic, bgp_egw_peer_ip]},    " ",  #${19}
            {get_property: [onboard_network_nnic, bgp_egw_peer_as]},    #${20}
            "\"", " -o /var/log/cloud/f5-vnf/cloud_config.log", " &" ]}
      onboardCluster:
        type: string
        default: "echo 'No cluster'"
      postCloudInit:
        type: string
        default: "echo 'No post cloud-init'"
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          implementation: gilan.gilan_plugin.tasks.set_runtime_properties
          inputs:
            runtime_properties:
              default:
                - name: createLog
                  value: {get_property: [SELF, createLog]}
                - name: configureMgmt
                  value: {get_property: [SELF, configureMgmt]}
                - name: overrideConfig
                  value: {get_property: [SELF, overrideConfig ]}
                - name: preOnboard
                  value: {get_property: [SELF, preOnboard ]}
                - name: encrypt
                  value: {get_property: [SELF, encrypt]}
                - name: ntpConfig
                  value: {get_property: [SELF, ntpConfig]}
                - name: onboard
                  value: {get_property: [SELF, onboard]}
                - name: onboardNetworkNNic
                  value: {get_property: [SELF, onboardNetworkNNic]}
                - name: onboardCluster
                  value: {get_property: [SELF, onboardCluster]}
                - name: installAs3
                  value: {get_property: [SELF, installAs3]}
                - name: installTS
                  value: {get_property: [SELF, installTS]}
                - name: postCloudInit
                  value: {get_property: [SELF, postCloudInit]}

node_templates:

  onboard_ve:
    type: cloudify.nodes.CloudInit.CloudConfig
    interfaces:
      cloudify.interfaces.lifecycle:
        create: {}
        configure: {}
        stop: {}
        delete: {}
        start:
          inputs:
            resource_config:
              write_files: *write_files
              merge_how: dict(recurse_array,no_replace)+list(append)
              runcmd:
                - {get_attribute: [SELF, createLog] }
                - {get_attribute: [SELF, configureMgmt] }
                - {get_attribute: [SELF, ntpConfig] }
                - {concat: ["/config/awaitNtpSync.sh && ", "/config/downloadScript.sh ", { get_input: manager_mgmt_host }, " ", { get_secret: manager_rest_username }, " ",  { get_secret: manager_rest_password}, " ", { get_secret: cm_tenant}, " ", {get_attribute: [SELF, blueprint_name] }, " ", "scripts", " ", "wait-cloudlibsInstall.sh &"]}
                - {concat: ["/config/awaitNtpSync.sh && ", "/config/downloadScript.sh ", { get_input: manager_mgmt_host }, " ", { get_secret: manager_rest_username }, " ",  { get_secret: manager_rest_password}, " ", { get_secret: cm_tenant}, " ", {get_attribute: [SELF, blueprint_name] }, " ", "scripts", " ", "override_config.sh &"]}
                - {concat: ["/config/awaitNtpSync.sh && ", "/config/downloadScript.sh ", { get_input: manager_mgmt_host }, " ", { get_secret: manager_rest_username }, " ",  { get_secret: manager_rest_password}, " ", { get_secret: cm_tenant}, " ", {get_attribute: [SELF, blueprint_name] }, " ", "scripts", " ",  "preOnboard.sh &"]}
                - {concat: ["/config/awaitNtpSync.sh && ", "/config/downloadScript.sh ", { get_input: manager_mgmt_host }, " ", { get_secret: manager_rest_username }, " ",  { get_secret: manager_rest_password}, " ", { get_secret: cm_tenant}, " ", {get_attribute: [SELF, blueprint_name] }, " ", "scripts", " ", "encrypt.sh &"]}
                - {concat: ["/config/awaitNtpSync.sh && ", "/config/downloadScript.sh ", { get_input: manager_mgmt_host }, " ", { get_secret: manager_rest_username }, " ",  { get_secret: manager_rest_password}, " ", { get_secret: cm_tenant}, " ", {get_attribute: [SELF, blueprint_name] }, " ", "scripts", " ", "onboard.sh &"]}
                - {concat: ["/config/awaitNtpSync.sh && ", "/config/downloadScript.sh ", { get_input: manager_mgmt_host }, " ", { get_secret: manager_rest_username }, " ",  { get_secret: manager_rest_password}, " ", { get_secret: cm_tenant}, " ", {get_attribute: [SELF, blueprint_name] }, " ", "scripts", " ", "onboard-network-nnic.sh &"]}
                - {concat: ["/config/awaitNtpSync.sh && ", "/config/downloadScript.sh ", { get_input: manager_mgmt_host }, " ", { get_secret: manager_rest_username }, " ",  { get_secret: manager_rest_password}, " ", { get_secret: cm_tenant}, " ", {get_attribute: [SELF, blueprint_name] }, " ", "scripts", " ", "onboard-cluster.sh &"]}
                - {concat: ["/config/awaitNtpSync.sh && ", "/config/downloadScript.sh ", { get_input: manager_mgmt_host }, " ", { get_secret: manager_rest_username }, " ",  { get_secret: manager_rest_password}, " ", { get_secret: cm_tenant}, " ", {get_attribute: [SELF, blueprint_name] }, " ", "scripts", " ", "installTS.sh &"]}
                - {concat: ["/config/awaitNtpSync.sh && ", "/config/downloadScript.sh ", { get_input: manager_mgmt_host }, " ", { get_secret: manager_rest_username }, " ",  { get_secret: manager_rest_password}, " ", { get_secret: cm_tenant}, " ", {get_attribute: [SELF, blueprint_name] }, " ", "scripts", " ", "installAS3.sh &"]}
                - {get_attribute: [SELF, overrideConfig] }
                - {get_attribute: [SELF, preOnboard] }
                - {get_attribute: [SELF, encrypt] }
                - {get_attribute: [SELF, onboard] }
                - {get_attribute: [SELF, onboardNetworkNNic] }
                - {get_attribute: [SELF, onboardCluster] }
                - {get_attribute: [SELF, installAs3] }
                - {get_attribute: [SELF, installTS] }
                - {get_attribute: [SELF, postCloudInit] }
    relationships:
      - type: f5.gilan.relationships.set_runtime_properties
        target: id
        source_interfaces:
            cloudify.interfaces.relationship_lifecycle:
              preconfigure:
                inputs:
                  runtime_properties:
                    - name: blueprint_name
                      value: { get_attribute: [TARGET, blueprint_id] }
      - type: f5.gilan.relationships.set_runtime_properties
        target: cloud_config_runcmds
        source_interfaces:
            cloudify.interfaces.relationship_lifecycle:
              preconfigure:
                inputs:
                  runtime_properties:
                    - name: createLog
                      value: { get_attribute: [TARGET, createLog] }
                    - name: configureMgmt
                      value: { get_attribute: [TARGET, configureMgmt] }
                    - name: overrideConfig
                      value: { get_attribute: [TARGET, overrideConfig] }
                    - name: preOnboard
                      value: { get_attribute: [TARGET, preOnboard] }
                    - name: encrypt
                      value: { get_attribute: [TARGET, encrypt] }
                    - name: ntpConfig
                      value: { get_attribute: [TARGET, ntpConfig] }
                    - name: onboard
                      value: { get_attribute: [TARGET, onboard] }
                    - name: onboardNetworkNNic
                      value: { get_attribute: [TARGET, onboardNetworkNNic] }
                    - name: onboardCluster
                      value: { get_attribute: [TARGET, onboardCluster] }
                    - name: installAs3
                      value: { get_attribute: [TARGET, installAs3] }
                    - name: installTS
                      value: { get_attribute: [TARGET, installTS] }
                    - name: postCloudInit
                      value: { get_attribute: [TARGET, postCloudInit] }

