tosca_definitions_version: cloudify_dsl_1_3

description: >
  The blueprint describes an classic F5 BIGIP usage scenario. BIGIP is being created using Cloudify's OpenStack plugin and onboarded by F5 cloud-libs solution.
  Scenario consists also client vm/simple web server (in one VM) started using Cloudify's script plugin.
  In addition, configuration of BIGIP (VS, pool etc) has been done using F5 Application Services 3 (AS3).

imports:
  - http://www.getcloudify.org/spec/cloudify/5.0.5/types.yaml
  - plugin:cloudify-openstack-plugin
  - plugin:cloudify-utilities-plugin
  - plugin:f5-gilan-plugin
  - services/customer_environment.yaml
  - services/cloudconfig.yaml

inputs:
  big_iq_host:
    type: string
    description: |
      The IP address of the BIG-IQ VE instance that will assign licenses to the BIG-IP VE instances
  big_iq_lic_pool:
    type: string
    description: |
      The name of the BIG-IQ key or pool that will be used to assign licenses to the BIG-IP VE instances
  manager_mgmt_host:
    type: string
    description: |
      The internal IP address of the Cloudify Manager instance
  use_config_drive:
    type: string
    default: False

  timezone:
    type: string
    default: UTC
    description:
      Timezone to be used by the BIGIP, if not specified default value is 'UTC'
  ntp_server:
    type: string
    description: >
      Address of the NTP server. If not specified, the default value is used.
    default: time.google.com

  agent_user:
    description: User name used when SSH-ing into the started machine
    default: ""
  webserver_port:
    description: The HTTP web server port

  vs_virtualAddress:
    description: Virtual server IP address in Client VLAN
  vs_virtualPort:
    description: Virtual server port

  datacenter:
    type: string
    default: default
    description: >
      The target vnfm datacenter for the deployment.
      Used in multi-vim scenarios.
  mgmt_net:
    type: string
    description: |
      The name of the pre-existing management network.
  mgmt_subnet:
    type: string
    description: |
      The name of the pre-existing management network subnet
  client_net:
    type: string
    description: |
      The name of the pre-existing management network.
  client_subnet:
    type: string
    description: |
      The name of the pre-existing management network subnet
  server_net:
    type: string
    description: |
      The name of the pre-existing management network.
  server_subnet:
    type: string
    description: |
      The name of the pre-existing management network subnet
  floating_network_id:
    type: string
    description: |
      The OpenStack ID of the network where you assigned a floating IP addresses
  mgmt_sg_name:
    type: string
    description: |
      The name of the pre-existing management security group
    default: ""
  key_name:
    type: string
    description: |
      The name of the OpenStack SSH key pair that you will import into the VE instance

  sw_ref_vm:
    description: |
      JSON software definition for VM. Check example inputs for format reference.

  sw_ref_bigip:
    description: |
      JSON software definition for BIGIP. Check example inputs for format reference.

  big_ip_as3_port:
    default: 443
  big_ip_as3_use_ssl:
    default: true
  big_ip_as3_verify_ssl:
    default: false

dsl_definitions:
  openstack_config: &openstack_config
    username: { get_attribute: [connection_params, data, keystone_username, value] }
    password: { get_attribute: [connection_params, data, keystone_password, value] }
    tenant_name: { get_attribute: [connection_params, data, keystone_tenant_name, value] }
    insecure: { get_attribute: [connection_params, data, keystone_allow_insecure, value] }
    ca_cert: { get_attribute: [connection_params, data, keystone_ca_cert, value] }
    auth_url: { get_attribute: [connection_params, data, keystone_url, value] }
    region: { get_attribute: [connection_params, data, region, value] }

node_templates:

########################################################################################################################
### F5 part

  id:
    type: f5.gilan.nodes.Id

  sw_ref_bigip:
    type: f5.gilan.nodes.SoftwareReference
    properties:
      sw_ref: { get_input: sw_ref_bigip }

  connection_params:
    type: cloudify.nodes.secrets.Reader
    properties:
      keys:
        - 'keystone_username'
        - 'keystone_password'
        - 'keystone_tenant_name'
        - 'keystone_allow_insecure'
        - 'keystone_ca_cert'
        - 'keystone_url'
        - 'region'
      variant: { get_input: datacenter }
      separator: '_'

  mgmt_port_bigip:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
    - type: cloudify.relationships.connected_to
      target: mgmt_net
    - type: cloudify.relationships.depends_on
      target: mgmt_subnet
    - type: cloudify.openstack.port_connected_to_security_group
      target: mgmt_sg
    - type: cloudify.relationships.depends_on
      target: connection_params

  client_port_bigip:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              allowed_address_pairs:
                - ip_address: "0.0.0.0/0"
    relationships:
    - type: cloudify.relationships.connected_to
      target: client_net
    - type: cloudify.relationships.depends_on
      target: client_subnet
    - type: cloudify.openstack.port_connected_to_security_group
      target: mgmt_sg
    - type: cloudify.relationships.depends_on
      target: connection_params

  server_port_bigip:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              allowed_address_pairs:
                - ip_address: "0.0.0.0/0"
    relationships:
      - type: cloudify.relationships.connected_to
        target: server_net
      - type: cloudify.relationships.depends_on
        target: server_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: mgmt_sg
      - type: cloudify.relationships.depends_on
        target: connection_params

  ve:
    type: cloudify.openstack.nodes.Server
    properties:
      openstack_config: *openstack_config
      agent_config:
        install_method: none
    relationships:
    - type: cloudify.openstack.server_connected_to_port
      target: mgmt_port_bigip
    - type: cloudify.openstack.server_connected_to_port
      target: client_port_bigip
    - type: cloudify.openstack.server_connected_to_port
      target: server_port_bigip
    - type: cloudify.relationships.depends_on
      target: onboard_ve
    - type: cloudify.relationships.depends_on
      target: sw_ref_bigip
    - type: cloudify.relationships.depends_on
      target: connection_params
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              key_name: { get_input: key_name }
              config_drive: true
              userdata: { get_attribute: [ onboard_ve, cloud_config ] }
              image_name: { get_attribute: [sw_ref_bigip, sw_ref, data, image] }
              flavor_name: { get_attribute: [sw_ref_bigip, sw_ref, data, flavor] }
              availability_zone: { get_attribute: [sw_ref_bigip, sw_ref, data, availability_zone]}

  check_all_services:
    type: cloudify.rest.Requests
    properties:
      port: {get_input: big_ip_as3_port}
      ssl: {get_input: big_ip_as3_use_ssl}
      verify: {get_input: big_ip_as3_verify_ssl}
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          inputs:
            template_file: templates/check-all-services.yaml
            params:
              username: { get_secret: bigip_username }
              password: { get_secret: bigip_admin_password }
              host: { get_attribute: [mgmt_port_bigip, fixed_ip_address] }
          max_retries: 90
          retry_interval: 20
    relationships:
      - type: cloudify.relationships.depends_on
        target: ve

########################################################################################################################
### F5 onboard via CloudLibs

  cloud_config_runcmds:
    type: f5.gilan.nodes.onboard.CloudConfigRuncmd
    properties:
      configureMgmt: { concat:  [ 'sh -c "while ! tmsh -a show sys mcp-state field-fmt | grep -q running; do echo \"Awaiting mcpd to configure mgmt\"; sleep 2; done && n=1; while [[ \$n -le 5 ]]; do echo \"Checking for MGMT DHCP\"; ((ifconfig mgmt 2> /dev/null | egrep inet | egrep -qv inet6) && echo \"BIP-IP MGMT IP Found\" && touch /tmp/exit_code); if [[ -f \"/tmp/exit_code\" ]]; then echo \"Static MGMT not required. Exit\"; exit 0;  fi; n=\$(( n+1 )); sleep 2; done && tmsh modify /sys global-settings mgmt-dhcp disabled && tmsh create /sys management-ip ', { get_attribute: [mgmt_port_bigip, fixed_ip_address] }, '/\$(cut -d \"/\" -f 2 <<< ', {get_attribute: [mgmt_subnet, external_resource, cidr]}, ') && tmsh create /sys management-route mgmt network default gateway ', {get_attribute: [mgmt_subnet, external_resource, gateway_ip]}, ' && tmsh modify /sys dns name-servers add { 8.8.8.8 }', '" >> /var/log/cloud/f5-vnf/cloud_config.log 2>&1 &' ] }
      onboard: { concat: ["/config/executeWhenExists.sh ", "/config/override_config.sh ",
          "/config/wait-cloudlibsInstall.sh && f5-rest-node ",
          "/config/cloud/f5-vnf/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js ",
          "--file /config/onboard.sh --wait-for ENCR_DONE --signal ONBOARD_CONF_DONE --cl-args ",
          "\"",
          {get_attribute: [mgmt_net, external_resource, mtu] }," ", #${1}
          {get_input: big_iq_host}," ", #${2}
          {get_secret: bigiq_username}, " ", #${3}
          {get_input: big_iq_lic_pool}, " ", #${4}
          {get_secret: bigiq_password}, " ", #${5}
          {get_attribute: [mgmt_port_bigip, external_id] }, " ", #${6}
          "custom_tier", " ", #${7}                # $tier in onboard.sh - $tier values for F5 blueprints: vnf, cgnat, cgnat_offering, dag for other usage: custom_tier
          "host-bigip.openstacklocal", " ", #${8}
          "custom_ric_licensing", " ", #${9}       # $ric_licensing in onboard.sh - $ric_licensing values for F5 blueprints: gilan, dns, dns_security for other usage: custom_ric_licensing
          "F5-BIG-MSP-NFVGILAN08", " ", #${10}     # custom_sku variable considered only when $tier=custom_tier and $ric_licensing=custom_ric_licensing
          "none", " ", #${11}                      # custom_ltm_level variable considered only when $tier=custom_tier and $ric_licensing=custom_ric_licensing
          "nominal", " ", #${12}                   # custom_afm_level variable considered only when $tier=custom_tier and $ric_licensing=custom_ric_licensing
          "nominal", " ", #${13}                   # custom_pem_level variable considered only when $tier=custom_tier and $ric_licensing=custom_ric_licensing
          "none", " ", #${14}                      # custom_gtm_level variable considered only when $tier=custom_tier and $ric_licensing=custom_ric_licensing
          "\"", " -o /var/log/cloud/f5-vnf/cloud_config.log", " &" ]}

    relationships:
      - type: cloudify.relationships.depends_on
        target: onboard_network_nnic
      - type: cloudify.relationships.depends_on
        target: mgmt_net
      - type: cloudify.relationships.depends_on
        target: mgmt_port_bigip

  onboard_network_nnic:
    type: f5.gilan.nodes.onboard.NetworkNNic
    properties:
      vlan_creates: "True,True"
      vlan_names: {concat: [
         {get_input: client_net}, "," ,
         {get_input: server_net}]}
      vlan_tags: "None,None"
      vlan_mtus: {concat: [{get_attribute: [client_net, external_resource, mtu]},',',{get_attribute: [server_net, external_resource, mtu]}] }
      port_macs : {concat: [{get_attribute: [client_port_bigip, mac_address]},',',{get_attribute: [server_port_bigip, mac_address]}] }
      vlan_nic_count: 2
      self_port_lockdowns: "allow-default;tcp:179,allow-default,allow-default,allow-default"
      self_ips: {concat: [
         {get_attribute: [client_port_bigip, fixed_ip_address]}, ",",
         {get_attribute: [server_port_bigip, fixed_ip_address]}]}
      self_ip_cidrs: {concat: [
         {get_attribute: [client_subnet, external_resource, cidr]}, ",",
         {get_attribute: [server_subnet, external_resource, cidr]}]}
      default_gateway: "None"
      cmp_src_vlans: {concat: [{get_input: client_net}]}
      cmp_dst_vlans: {concat: [{get_input: server_net}]}
      tier: vnf          # value needed for BGP configuration, if bgp_pgw_peer_as = None then onboard-network-nic.sh did not create BGP router, then the value can be any
      user: {get_secret: bigip_username}
      pwd: {get_secret: bigip_admin_password}
      bgp_pgw_peer_ip: "None"
      bgp_pgw_peer_as: "None"
      bgp_egw_peer_ip: "None"
      bgp_egw_peer_as: "None"
    relationships:
      - type: cloudify.relationships.depends_on
        target: client_net
      - type: cloudify.relationships.depends_on
        target: client_port_bigip
      - type: cloudify.relationships.depends_on
        target: server_port_bigip
      - type: cloudify.relationships.depends_on
        target: client_subnet
      - type: cloudify.relationships.depends_on
        target: server_subnet


########################################################################################################################
### F5 AS3 declaration
  as3_declaration:
    type: cloudify.rest.BunchRequests
    properties:
      port: {get_input: big_ip_as3_port}
      ssl: {get_input: big_ip_as3_use_ssl}
      verify: {get_input: big_ip_as3_verify_ssl}
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          inputs:
            templates:
              - template_file: templates/get_token.yaml
                retry_sleep: 30
                params:
                  username: { get_secret: bigip_username }
                  password: { get_secret: bigip_admin_password }
                  host: { get_attribute: [mgmt_port_bigip, fixed_ip_address] }
                save_to: params_host
              - template_file: templates/as3-declaration.yaml
                prerender: true
                retry_sleep: 30
                save_to: results
                params_attributes:
                  token: [params_host, result_properties, token]
                params:
                  username: { get_secret: bigip_username }
                  password: { get_secret: bigip_admin_password }
                  host: { get_attribute: [mgmt_port_bigip, fixed_ip_address] }
                  vs_virtualAddress: {get_input: vs_virtualAddress}
                  vs_virtualPort: {get_input: vs_virtualPort}
                  webserver_port: {get_input: webserver_port}
                  pool_member: { get_attribute: [ server_port_vm, fixed_ip_address ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: check_all_services

outputs:
  http_endpoint:
    description: Web server external endpoint
    value: { concat: ['http://', { get_attribute: [virtual_ip_vm, floating_ip_address] },
                      ':', { get_property: [client_and_http_web_server, port] }] }
  test_command:
    description: Command to test the deployed environment
    value: { concat: ['curl ', {get_input: vs_virtualAddress},
                      ':', {get_input: vs_virtualPort}] }
