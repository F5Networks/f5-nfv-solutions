tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/f5-vnfm/1.0/types.yaml
  - http://www.getcloudify.org/spec/f5-vnfm/1.0/service_layer_workflows/service.yaml
  - http://www.getcloudify.org/spec/f5-vnfm/1.0/cloudify-utilities-plugin/plugin.yaml
  - plugin:f5-gilan-plugin
  - plugin:f5-ric-plugin
  - services/F5-VNF-Service-Layer-Firewall.yaml

inputs:
  ctrl_subnet:
    type: string
    description: |
      The name of the control network subnet
  ctrl_sg_name:
    type: string
    description: |
      The name of the pre-existing control security group
  ha_subnet:
    type: string
    description: |
      Name of the high availability network subnet
  mgmt_subnet:
    type: string
    description: |
      The name of the pre-existing management network subnet
  mgmt_sg_name:
    type: string
    description: |
      The name of the pre-existing management security group
  pdn_dag_subnet:
    type: string
    description: |
      The name of the pre-existing PDN-DAG network subnet
  pgw_dag_subnet:
    type: string
    description: |
      The name of the pre-existing PGW-DAG network subnet
  pdn_subnet:
    type: string
    description: |
      The name of the pre-existing PDN network subnet
  pgw_subnet:
    type: string
    description: |
      The name of the pre-existing PGW subnetwork
  pgw_sg_name:
    type: string
    description: |
      The name of the pre-existing packet gateway (PGW) security group
  snmp_sg_name:
    type: string
    description: |
      The name of the pre-existing SNMP security group
  pdn_sg_name:
    type: string
    description: |
      The name of the pre-existing provider data network (PDN) security group

  # Nagios inputs
  floating_network_id:
    type: string
    description: |
      The OpenStack ID or name of the network where you assigned a floating IP addresses
node_templates:
  render:
    type: f5.gilan.nodes.render.VimData
    properties:
      vim: openstack
      blueprints:
        nagios: {concat: [{get_property: [render, vim]}, _, gilan_nagios.yaml]}
        vnf_group: {concat: [{get_property: [render, vim]}, _, vnf_group.yaml]}
        da_group: {concat: [{get_property: [render, vim]}, _, da_group.yaml]}
        vnfd_dag: {concat: [{get_property: [render, vim]}, _,vnfd_dag_ve.yaml]}
        vnfd_vnf_ve_master: {concat: [{get_property: [render, vim]}, _, vnfd_vnf_ve_master.yaml]}
        vnfd_vnf_ve_slave: {concat: [{get_property: [render, vim]}, _, vnfd_vnf_ve_slave.yaml]}
      networks:
        mgmt:
          net_id: { get_input: mgmt_net }
          subnet_id: { get_input: mgmt_subnet }
          mgmt_sg_id: { get_input: mgmt_sg_name }
          snmp_sg_id: { get_input: snmp_sg_name }
          mgmt_tcp_port: '443'
        ctrl:
          net_id: { get_input: ctrl_net }
          subnet_id: { get_input: ctrl_subnet }
          sg_id: { get_input: ctrl_sg_name }
        ha:
          net_id: { get_input: ha_net }
          subnet_id: { get_input: ha_subnet }
          sg_id: { get_input: ctrl_sg_name }
        pdn:
          net_id: { get_input: pdn_net }
          subnet_id: { get_input: pdn_subnet }
          sg_id: { get_input: pdn_sg_name }
        pgw:
          net_id: { get_input: pgw_net }
          subnet_id: { get_input: pgw_subnet }
          sg_id: { get_input: pgw_sg_name }
        pgw_dag:
          net_id: { get_input: pgw_dag_net }
          subnet_id: { get_input: pgw_dag_subnet }
        pdn_dag:
          net_id: { get_input: pdn_dag_net }
          subnet_id: { get_input: pdn_dag_subnet }

  openstack_validator:
    type: f5.gilan.nodes.InputValidator
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          inputs:
            custom_format:
              - name: "sw_ref_dag"
                value: {get_input: sw_ref_dag}
                format:
                  data:
                    image: {}
                    flavor: {}
                    availability_zone: {}
                  revision: {}
              - name: "sw_ref_vnf"
                value: {get_input: sw_ref_vnf}
                format:
                  data:
                    image: {}
                    flavor: {}
                    availability_zone: {}
                  revision: {}
              - name: "sw_ref_nagios"
                value: {get_input: sw_ref_nagios}
                format:
                  data:
                    image: {}
                    flavor: {}
                    availability_zone: {}
                  revision: {}

  nagios_server:
    type: cloudify.nodes.DeploymentProxy
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            resource_config: &nagios_server_resource_config
              blueprint:
                main_file_name: { get_property: [render, blueprints, nagios] }
                blueprint_archive: nagios.zip
              deployment:
                logs:
                  redirect: false
                id: { concat: [{ get_attribute: [id, deployment_id] },'_', { get_attribute: [SELF,  blueprint, id]}] }
                inputs:
                  base_deployment_id: {get_attribute: [id, deployment_id]}
                  sw_ref: {get_input: sw_ref_nagios}
                  floating_network_id: { get_input: floating_network_id }
                  key_name: { get_input: bigip_ssh_key }
                  agent_user: { get_input: agent_user }
                  mgmt_net_ref: {get_property: [render, networks, mgmt]}
                  vnf_layer_cpu_threshold: { get_input: vnf_layer_cpu_threshold }
                  vnf_layer_cpu_threshold_check_interval: { get_input: vnf_layer_cpu_threshold_check_interval }
                  vnf_group_throughput: { get_input: vnf_group_throughput }
                  vnf_group_throughput_threshold: { get_input: vnf_group_throughput_threshold }
                  vnf_group_throughput_check_interval: { get_input: vnf_group_throughput_check_interval }
                  dag_group_cpu_threshold: { get_input: dag_group_cpu_threshold }
                  dag_group_cpu_threshold_check_interval: { get_input: dag_group_cpu_threshold_check_interval }
                  nagios_user: { get_input: nagios_user }
                  nagios_pass: { get_input: nagios_pass }
                  manager_rest_username: { get_secret: manager_rest_username }
                  manager_rest_password: { get_secret: manager_rest_password }
                  ntp_server: { get_input: ntp_server }
                  timezone: {get_input: timezone}
                outputs:
                  internal_address: internal_address
                  nagios_ssl_certificate: nagios_ssl_certificate
                  vnf_group_threshold: vnf_group_threshold
        configure:
          inputs:
            resource_config: *nagios_server_resource_config
        start:
          inputs:
            workflow_id: install
            resource_config: *nagios_server_resource_config
            timeout: -1
        stop:
          inputs:
            workflow_id: uninstall
            resource_config: *nagios_server_resource_config
            timeout: -1
        delete:
          inputs:
            resource_config: *nagios_server_resource_config
